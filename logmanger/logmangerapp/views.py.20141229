from django.shortcuts import render,render_to_response
from django.template import RequestContext
from django.views.decorators.csrf import csrf_exempt
import socket
from django.db import connection,models
from logmangerapp.models import AddLogpath
import MySQLdb
import json
from django.http import HttpResponse

# Create your views here.
def socket_send(ip,command):
    sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    sock.connect((ip,1003))
    sock.send(command)
    data = ""
    count = 1
    End = "#zbcyh#"
    total_data = []
    
    while True:
        data = sock.recv(8192)
        count = count + 1
        print count
        if not len(data):
            break
        if End in data:
            total_data.append(data[:data.find(End)])
            break
        total_data.append(data)
        if len(total_data) > 1:
            last_pair = total_data[-2] + total_data[-1]
            if End in last_pair:
                total_data[-2] = last_pair[:last_pair.find(End)]
                total_data.pop()
                break
    
#    result = sock.recv(40960)
#        print total_data
    recv_data = ''.join(total_data)
    sock.close()
#    return result
    return recv_data
@csrf_exempt
def view(request):
    return render_to_response('test4.html')

@csrf_exempt
def view2(request):
    logpathlist = AddLogpath.objects.all()
    print 'the path is %s',logpathlist
    db = MySQLdb.connect(user='zsjupdate',db='moloong_mds',passwd='G5bpEadCrxsDe5aCnDlk',host='112.124.202.146',port=3808)
    cursor = db.cursor()
    cursor2 = db.cursor()
    sql2 = 'select distinct(platformAlias) from mds_server'
    cursor2.execute(sql2)
    platformAliass = [row[0] for row in cursor2.fetchall()]
    TxtlogResult = ['ceshi','ceshi2']
    if request.method=='POST':
        try:
	    logTime=request.POST['date']
	except:
	    pass
        try:
	    platformAlias=request.POST['agent']
	except:
	    pass
        try:
	    logPath=request.POST['logdir']
	except:
	    pass
	try:
	    serverId=request.POST['zone']
	except:
	    pass
	try:
	    logCount=request.POST['sum']
	except:
	    pass

	print logTime,platformAlias,logPath,serverId,logCount
	sql = 'select serverIp from mds_server where platformAlias="%s" and serverId="%s"'
	cursor.execute(sql%(platformAlias,serverId))
#        for platformAliasss in platformAliass:
#            print platformAliasss
	serverIp1 = [row[0] for row in cursor.fetchall()]
        print serverIp1
        for serverIp in serverIp1:
	    print serverIp
	db.close()
	logexist = AddLogpath.objects.all()
        print logexist
	for list in logexist:
	    print list.logpath
	if list.logpath == logPath:
	    print 'the logpath is exist'
	else:
	    l1 = AddLogpath(logpath=logPath)
	    l1.save()
        serverinfo_list = []
        serverinfo = {}
        serverinfo["platformAlias"] = platformAlias
        serverinfo["serverId"] = serverId
        serverinfo["serverIp"] = serverIp
        serverinfo["logPath"] = logPath
        serverinfo["logTime"] = logTime
        serverinfo["logCount"] = logCount
#        serverinfo = json.dumps(serverinfo)
        serverinfo_list.append(serverinfo)
#        serverinfo_dic = {}
#        serverinfo_dic['serverinfo'] = serverinfo_list
        command = {}
        command["cmd"] = 'logoperate'
        command["checkType"] = 'phplog'
        command["serverinfo_list"] = serverinfo_list
        command = json.dumps(command) + "#zbcyh#"
        print command
        try:
            logResult = socket_send('14.18.204.150',command)
        except:
            print 'not connect'
        JsLogResult = json.loads(logResult)
        TxtlogResult = JsLogResult['msg']
        print TxtlogResult
#        file_object = open('log.txt','w')
#        file_object.write(TxtlogResult)
#        file_object.close()

    return render_to_response('logquery3.html',{'result':logpathlist,'result2':platformAliass,'result3':TxtlogResult})
@csrf_exempt
def checkjavalog(request):
    logpathlist = AddLogpath.objects.all()
    print 'the path is %s',logpathlist
    db = MySQLdb.connect(user='zsjupdate',db='moloong_mds',passwd='G5bpEadCrxsDe5aCnDlk',host='112.124.202.146',port=3808)
    cursor = db.cursor()
    cursor2 = db.cursor()
    sql2 = 'select distinct(platformAlias) from mds_server'
    cursor2.execute(sql2)
    platformAliass = [row[0] for row in cursor2.fetchall()]
    TxtlogResult = ['ceshi','ceshi2']
    key = ""
    if request.method=='POST':
        try:
	    logTime=request.POST['date']
	except:
	    pass
        try:
	    platformAlias=request.POST['agent']
	except:
	    pass
        try:
	    logPath=request.POST['logdir']
	except:
	    pass
	try:
	    serverId=request.POST['zone']
	except:
	    pass
        try:
            key=request.POST['key']
        except:
            pass
        try:
            hour=request.POST['hour']
        except:
            pass
	print logTime,platformAlias,logPath,serverId,hour
	sql = 'select serverIp from mds_server where platformAlias="%s" and serverId="%s"'
	cursor.execute(sql%(platformAlias,serverId))
#        for platformAliasss in platformAliass:
#      /      print platformAliasss
	serverIp1 = [row[0] for row in cursor.fetchall()]
        print serverIp1
        for serverIp in serverIp1:
	    print serverIp
	db.close()
	logexist = AddLogpath.objects.all()
        print logexist
	for list in logexist:
	    print list.logpath
	if list.logpath == logPath:
	    print 'the logpath is exist'
	else:
	    l1 = AddLogpath(logpath=logPath)
	    l1.save()
        queryset = AddLogpath.objects.values('logtype').filter(logpath=logPath)[0]['logtype']
        print 'the querysettype is'
        print queryset
        serverinfo_list = []
        serverinfo = {}
        serverinfo["platformAlias"] = platformAlias
        serverinfo["serverId"] = serverId
        serverinfo["serverIp"] = serverIp
        serverinfo["logPath"] = logPath
        serverinfo["logTime"] = logTime
        serverinfo["key"] = key
        serverinfo['logtype'] = queryset
        serverinfo['hour'] = hour
#        serverinfo = json.dumps(serverinfo)
        serverinfo_list.append(serverinfo)
#        serverinfo_dic = {}
#        serverinfo_dic['serverinfo'] = serverinfo_list
        command = {}
        command["cmd"] = 'logoperate'
        command["checkType"] = 'javasearchlog'
        command["serverinfo_list"] = serverinfo_list
        print command
        command = json.dumps(command) + "#zbcyh#"
        print command
        try:
            logResult = socket_send('14.18.204.150',command)
        except:
            print 'not connect'
        try:
            JsLogResult = json.loads(logResult)
            TxtlogResult = JsLogResult['msg']
        except:
            print 'not value'
        print TxtlogResult
    return render_to_response('checkjavalog.html',{'result':logpathlist,'result2':platformAliass,'result3':TxtlogResult})

@csrf_exempt
def downjavalog(request):
    logpathlist = AddLogpath.objects.all()
    print 'the path is %s',logpathlist
    db = MySQLdb.connect(user='zsjupdate',db='moloong_mds',passwd='G5bpEadCrxsDe5aCnDlk',host='112.124.202.146',port=3808)
    cursor = db.cursor()
    cursor2 = db.cursor()
    sql2 = 'select distinct(platformAlias) from mds_server'
    cursor2.execute(sql2)
    platformAliass = [row[0] for row in cursor2.fetchall()]
    TxtlogResult = ['ceshi','ceshi2']
    if request.method=='POST':
        try:
	    logTime=request.POST['date']
	except:
	    pass
        try:
	    platformAlias=request.POST['agent']
	except:
	    pass
        try:
	    logPath=request.POST['logdir']
	except:
	    pass
	try:
	    serverId=request.POST['zone']
	except:
	    pass
        try:
            hour = request.POST['hour']
        except:
            pass
	print logTime,platformAlias,logPath,serverId,hour
	sql = 'select serverIp from mds_server where platformAlias="%s" and serverId="%s"'
	cursor.execute(sql%(platformAlias,serverId))
#        for platformAliasss in platformAliass:
#            print platformAliasss
	serverIp1 = [row[0] for row in cursor.fetchall()]
        print serverIp1
        for serverIp in serverIp1:
	    print serverIp
	db.close()
	logexist = AddLogpath.objects.all()
        print logexist
	for list in logexist:
	    print list.logpath
	if list.logpath == logPath:
	    print 'the logpath is exist'
	else:
	    l1 = AddLogpath(logpath=logPath)
	    l1.save()
        serverinfo_list = []
        serverinfo = {}
        serverinfo["platformAlias"] = platformAlias
        serverinfo["serverId"] = serverId
        serverinfo["serverIp"] = serverIp
        serverinfo["logPath"] = logPath
        serverinfo["logTime"] = logTime
        serverinfo["hour"] = hour
#        serverinfo = json.dumps(serverinfo)
        serverinfo_list.append(serverinfo)
#        serverinfo_dic = {}
#        serverinfo_dic['serverinfo'] = serverinfo_list
        command = {}
        command["cmd"] = 'logoperate'
        command["checkType"] = 'downjavalog'
        command["serverinfo_list"] = serverinfo_list
        command = json.dumps(command) + "#zbcyh#"
        print command
        try:
            logResult = socket_send('14.18.204.150',command)
        except:
            print 'not connect'
        JsLogResult = json.loads(logResult)
        TxtlogResult = JsLogResult['msg']
        print TxtlogResult
    return render_to_response('downjavalog.html',{'result':logpathlist,'result2':platformAliass})

@csrf_exempt
def searchjavalog(request):
    logpathlist = AddLogpath.objects.all()
    print 'the path is %s',logpathlist
    db = MySQLdb.connect(user='zsjupdate',db='moloong_mds',passwd='G5bpEadCrxsDe5aCnDlk',host='112.124.202.146',port=3808)
    cursor = db.cursor()
    cursor2 = db.cursor()
    sql2 = 'select distinct(platformAlias) from mds_server'
    cursor2.execute(sql2)
    platformAliass = [row[0] for row in cursor2.fetchall()]
    TxtlogResult = ['ceshi','ceshi2']
    if request.method=='POST':
        try:
	    logTime=request.POST['date']
	except:
	    pass
        try:
	    platformAlias=request.POST['agent']
	except:
	    pass
        try:
	    logPath=request.POST['logdir']
	except:
	    pass
	try:
	    serverId=request.POST['zone']
	except:
	    pass
	try:
	    key=request.POST['key']
	except:
	    pass
        try:
            hour = request.POST['hour']
        except:
            pass
	print logTime,platformAlias,logPath,serverId,hour,key
	sql = 'select serverIp from mds_server where platformAlias="%s" and serverId="%s"'
	cursor.execute(sql%(platformAlias,serverId))
#        for platformAliasss in platformAliass:
#            print platformAliasss
	serverIp1 = [row[0] for row in cursor.fetchall()]
        print serverIp1
        for serverIp in serverIp1:
	    print serverIp
	db.close()
	logexist = AddLogpath.objects.all()
        print logexist
	for list in logexist:
	    print list.logpath
	if list.logpath == logPath:
	    print 'the logpath is exist'
	else:
	    l1 = AddLogpath(logpath=logPath)
	    l1.save()
        serverinfo_list = []
        serverinfo = {}
        serverinfo["platformAlias"] = platformAlias
        serverinfo["serverId"] = serverId
        serverinfo["serverIp"] = serverIp
        serverinfo["logPath"] = logPath
        serverinfo["logTime"] = logTime
        serverinfo["key"] = key
        serverinfo["hour"] = hour
#        serverinfo = json.dumps(serverinfo)
        serverinfo_list.append(serverinfo)
#        serverinfo_dic = {}
#        serverinfo_dic['serverinfo'] = serverinfo_list
        command = {}
        command["cmd"] = 'logoperate'
        command["checkType"] = 'searchjavalog'
        command["serverinfo_list"] = serverinfo_list
        command = json.dumps(command) + "#zbcyh#"
        print command
        try:
            logResult = socket_send('14.18.204.150',command)
        except:
            print 'not connect'
        JsLogResult = json.loads(logResult)
        TxtlogResult = JsLogResult['msg']
        print TxtlogResult
    return render_to_response('searchjavalog.html',{'result':logpathlist,'result2':platformAliass,'result3':TxtlogResult})
@csrf_exempt
def test(request):
    response_data = {}  
#    response_data['result'] = 'ok'  
    response_data['data'] = request.POST['url']
    response_data['data1'] = request.POST['type']
    print request.POST['url']
    print request.POST['type']
    logexist = AddLogpath.objects.all()
#    print logexist
    for list in logexist:
	print list.logpath
    if list.logpath == request.POST['url']:
	print 'the logpath is exist'
    else:
	l1 = AddLogpath(logpath=request.POST['url'],logtype=request.POST['type'])
	l1.save()
    return HttpResponse(json.dumps(response_data), content_type="application/json")

