from django.shortcuts import render,render_to_response
from django.template import RequestContext
from django.views.decorators.csrf import csrf_exempt
import socket
from django.db import connection,models
from logmangerapp.models import AddLogpath
import MySQLdb
import json


# Create your views here.
def socket_send(ip,command):
    sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    sock.connect((ip,1003))
    sock.send(command)
    result = sock.recv(2048)
    sock.close()
    return result
@csrf_exempt
def view(request):
    return render_to_response('test4.html')

@csrf_exempt
def view2(request):
    logpathlist = AddLogpath.objects.all()
    print 'the path is %s',logpathlist
    db = MySQLdb.connect(user='zsjupdate',db='moloong_mds',passwd='G5bpEadCrxsDe5aCnDlk',host='112.124.202.146',port=3808)
    cursor = db.cursor()
    cursor2 = db.cursor()
    sql2 = 'select distinct(platformAlias) from mds_server'
    cursor2.execute(sql2)
    platformAliass = [row[0] for row in cursor2.fetchall()]
    if request.method=='POST':
        try:
	    logTime=request.POST['date']
	except:
	    pass
        try:
	    platformAlias=request.POST['agent']
	except:
	    pass
        try:
	    logPath=request.POST['logdir']
	except:
	    pass
	try:
	    serverId=request.POST['zone']
	except:
	    pass
	try:
	    logCount=request.POST['sum']
	except:
	    pass
	print logTime,platformAlias,logPath,serverId,logCount
	sql = 'select serverIp from mds_server where platformAlias="%s" and serverId="%s"'
	cursor.execute(sql%(platformAlias,serverId))
#        for platformAliasss in platformAliass:
#            print platformAliasss
	serverIp1 = [row[0] for row in cursor.fetchall()]
        print serverIp1
        for serverIp in serverIp1:
	    print serverIp
	db.close()
	logexist = AddLogpath.objects.all()
        print logexist
	for list in logexist:
	    print list.logpath
	if list.logpath == logPath:
	    print 'the logpath is exist'
	else:
	    l1 = AddLogpath(logpath=logPath)
	    l1.save()
        command = {}
        command["platformAlias"] = platformAlias
        command["serverId"] = serverId
        command["serverIp"] = serverIp
        command["logPath"] = logPath
        command["logTime"] = logTime
        command["logCount"] = logCount
        command = json.dumps(command) + '#zbcyh#'
        print command
        try:
            logResult = socket_send('14.18.204.150',command)
        except:
            print 'not connect'
        print logResult
    return render_to_response('logquery3.html',{'result':logpathlist,'result2':platformAliass})




